stringr::str_split("-", simplify = TRUE)
ID_MAP$Broad_Sample = paste(tmp[,1], tmp[,2], sep = "-")
ID_MAP %<>% unique()
Dose_Response$pert_iname  = ifelse(Dose_Response$pert_iname == "", "Control", Dose_Response$pert_iname)
Dose_Response$Ratio_Infection = Dose_Response$Count_Infected/Dose_Response$Count_Nuclei
Dose_Response %<>% filter(Ratio_Infection <= 1)
Summary = Dose_Response %>%
group_by(pert_iname,
mmoles_per_liter,
Metadata_Barcode) %>%
summarise(., Times_Drug = n(),
avr_Infected = median(Count_Infected),
avr_nuclei = median(Count_Nuclei),
avr_ratio = median(Ratio_Infection)) %>%
arrange(., desc(Times_Drug))
CTR_Infec = Summary %>%
filter(pert_iname %in% "Control")
CTR_Infec = CTR_Infec [,-c(1,2,4)]
names(CTR_Infec)[-1]=paste0("CTR", names(CTR_Infec)[-1])
Summary = dplyr::inner_join(Summary, CTR_Infec)
Summary$Ratio_Infection = (Summary$avr_ratio)/ Summary$CTRavr_ratio
Summary$Ratio_Nuclei    = Summary$avr_nuclei/Summary$CTRavr_nuclei
Dose_Response = dplyr::inner_join(Dose_Response, CTR_Infec)
Dose_Response$Ratio_Nuclei = Dose_Response$Count_Nuclei / Dose_Response$CTRavr_nuclei
Dose_Response$Ratio_Infection_Normalized = Dose_Response$Ratio_Infection / Dose_Response$CTRavr_ratio
Dose_Response %<>% dplyr::select(pert_iname,
Count_Infected,
Count_Nuclei,
Ratio_Infection_Normalized,
Ratio_Nuclei,
mmoles_per_liter)
Summary = Dose_Response %>%
group_by(pert_iname,
mmoles_per_liter) %>%
summarise(., Times_Drug = n(),
avr_Infected = mean(Count_Infected),
avr_nuclei = mean(Count_Nuclei),
Ratio_Infection = mean(Ratio_Infection_Normalized),
Ratio_Nuclei = mean(Ratio_Nuclei)) %>%
arrange(., desc(Times_Drug))
ggplot(Dose_Response) +
aes(x = Count_Infected, y = Count_Nuclei) +
geom_point(size = 1L, colour = "#0c4c8a") +
theme_minimal() +
labs(y = "Count Nuclei", x = "Count Infected")
ggplot(Dose_Response) +
aes(x = Count_Infected) +
geom_histogram(bins = 30L, fill = "#bd3786") +
labs(x = "Count Infected", y = "Frequency", title = "Infected Cells") +
theme_minimal()
ggplot(Dose_Response) +
aes(x = Count_Nuclei) +
geom_histogram(bins = 30L, fill = "#bd3786") +
labs(x = "Count Cells",
y = "Frequency",
title = "Total Cells") +
theme_minimal()
ggplot(Summary) +
aes(x = Ratio_Infection) +
geom_histogram(bins = 30L, fill = "#bd3786") +
labs(x = "Ratio Infection",
y = "Frequency",
title = "Average Ratio Infection") +
theme_minimal()
ggplot(Summary) +
aes(x = Ratio_Nuclei) +
geom_histogram(bins = 30L, fill = "#bd3786") +
labs(x = "Ratio Cell",
y = "Frequency",
title = "Average Ratio Cell") +
theme_minimal()
Dose_Response$mmoles_per_liter_normalized = round(Dose_Response$mmoles_per_liter,2)
Dose_Response$mmoles_per_liter_normalized = ifelse(Dose_Response$mmoles_per_liter_normalized >= 5, 10, Dose_Response$mmoles_per_liter_normalized)
Dose_Response$mmoles_per_liter_normalized = ifelse(Dose_Response$mmoles_per_liter_normalized >= 0.005 &
Dose_Response$mmoles_per_liter_normalized < 0.05, 0.01,
Dose_Response$mmoles_per_liter_normalized)
Dose_Response$mmoles_per_liter_normalized = ifelse(Dose_Response$mmoles_per_liter_normalized >= 0.05 &
Dose_Response$mmoles_per_liter_normalized < 0.5, 0.1,
Dose_Response$mmoles_per_liter_normalized)
Dose_Response$mmoles_per_liter_normalized = ifelse(Dose_Response$mmoles_per_liter_normalized >= 0.5 &
Dose_Response$mmoles_per_liter_normalized < 5, 1,
Dose_Response$mmoles_per_liter_normalized)
table(Dose_Response$mmoles_per_liter_normalized)
Summary$mmoles_per_liter_normalized = round(Summary$mmoles_per_liter,2)
Summary$mmoles_per_liter_normalized = ifelse(Summary$mmoles_per_liter_normalized >= 5, 10, Summary$mmoles_per_liter_normalized)
Summary$mmoles_per_liter_normalized = ifelse(Summary$mmoles_per_liter_normalized >= 0.005 &
Summary$mmoles_per_liter_normalized < 0.05, 0.01,
Summary$mmoles_per_liter_normalized)
Summary$mmoles_per_liter_normalized = ifelse(Summary$mmoles_per_liter_normalized >= 0.05 &
Summary$mmoles_per_liter_normalized < 0.5, 0.1,
Summary$mmoles_per_liter_normalized)
Summary$mmoles_per_liter_normalized = ifelse(Summary$mmoles_per_liter_normalized >= 0.5 &
Summary$mmoles_per_liter_normalized < 5, 1,
Summary$mmoles_per_liter_normalized)
table(Summary$mmoles_per_liter_normalized)
table(Summary$mmoles_per_liter_normalized)
Summary$mmoles_per_liter_normalized %<>%factor(., levels = c(0.01, 0.1, 1, 10), labels = c(0.008,  0.08,  0.8 , 8))
Dose_Response$mmoles_per_liter_normalized %<>%factor(., levels = c(0.01, 0.1, 1, 10), labels = c(0.008,  0.08,  0.8 , 8))
table( Dose_Response$mmoles_per_liter_normalized)
table( Summary$mmoles_per_liter_normalized)
Dose_Response$mmoles_per_liter_normalized  %<>%
as.character() %>% as.numeric()
Summary$mmoles_per_liter_normalized  %<>%
as.character() %>% as.numeric()
X = Summary %>%
filter(!is.na(mmoles_per_liter_normalized)) %>%
pull (pert_iname) %>%
unique()
names(Dose_Response)[1] = "drug"
require(drc)
require(gridExtra)
`%ni%` <- Negate(`%in%`)
drugs = Dose_Response$drug %>%
unique()
i = 1
DRC_Infected = DRC_Cell = DR = list()
for(i in 1: length(drugs)){
p_n = p_i = vector()
dose_response = Dose_Response %>%
filter(drug %in% drugs[i])
curved_fit <- try(drm(
formula = Ratio_Infection_Normalized ~ mmoles_per_liter,
data = dose_response,
fct = LL.4(names = c("hill", "min_value", "max_value", "ec_50"))), silent = TRUE)
if(class(curved_fit)!= "try-error"){
# summary(curved_fit)
dose_response$predict_infected = predict(curved_fit)
coefs <- setNames(
curved_fit$coefficients,
c("hill", "min_value", "max_value", "ec_50")
) %>% t%>% as.data.frame()
EDs = suppressMessages(ED(curved_fit, c(5, 10, 20, 50, 80), interval = "none", display = F)[,1])
names(EDs) = c("IC5", "IC10", "IC20", "IC50", "IC80")
coefs$drug = drugs[i]
coefs$noEffect = noEffect(curved_fit)[3]
coefs = cbind(coefs, t(EDs))
DRC_Infected[[i]] = coefs
x = dose_response %>%
dplyr::select(., c("Count_Infected","Count_Nuclei", "mmoles_per_liter_normalized", "predict_infected", Ratio_Infection_Normalized))
}
curved_fit <- try(drm(
formula = Ratio_Nuclei ~ mmoles_per_liter,
data = dose_response,
fct = LL.4(names = c("hill", "min_value", "max_value", "ec_50"))), silent = TRUE)
if(class(curved_fit)!= "try-error"){
summary(curved_fit)
dose_response$predict_nuclei = predict(curved_fit)
coefs <- setNames(
curved_fit$coefficients,
c("hill", "min_value", "max_value", "ec_50")
) %>% t%>% as.data.frame()
EDs = suppressMessages(ED(curved_fit, c(5, 10, 20, 50, 80), interval = "none", display = F)[,1])
names(EDs) = c("IC5", "IC10", "IC20", "IC50", "IC80")
coefs$drug = drugs[i]
coefs$noEffect = noEffect(curved_fit)[3]
coefs = cbind(coefs, t(EDs))
DRC_Cell[[i]] = coefs
x = dose_response %>%
dplyr::select(., c("Ratio_Nuclei", "mmoles_per_liter_normalized", "predict_nuclei"))
}
DR[[i]] = dose_response
}
DRC_Cell %<>% bind_rows()
DRC_Infected %<>% bind_rows()
DR %<>% bind_rows()
DR$Ratio_Curves = DR$Ratio_Infection_Normalized/DR$Ratio_Nuclei
DR$Diff_Curves = DR$Ratio_Infection_Normalized-DR$Ratio_Nuclei
fwrite(DRC_Cell, "../out/DRC_Cell_Dump.tsv", sep = "\t", quote = F, row.names = F)
fwrite(DRC_Infected, "../out/DRC_Infection_Dump.tsv", sep = "\t", quote = F, row.names = F)
fwrite(DR, "../out/DR_predicted_Dump.tsv", sep = "\t", quote = F, row.names = F)
rm(list = ls())
require(dplyr)
require(data.table)
require(magrittr)
require(readxl)
require(ggplot2)
require(tidyr)
`%ni%` <- Negate(`%in%`)
reduction <- function(BASE, perc){
Dose_0.008 = ifelse(BASE$Dose_0.008 < perc, 1,0)
Dose_0.08 = ifelse(BASE$Dose_0.08 < perc, 1,0)
Dose_0.8 = ifelse(BASE$Dose_0.8 < perc, 1,0)
Dose_8 = ifelse(BASE$Dose_8 < perc, 1,0)
X = data.frame(Dose_0.008, Dose_0.08,
Dose_0.8, Dose_8)
X$TOT = rowSums(X, na.rm = T)
names(X) = paste(names(X), perc, sep = "_")
BASE = cbind(BASE, X)
return(BASE)
}
DRC_Cell = fread( "../out/DRC_Cell_Dump.tsv", sep = "\t")
DRC_Infected = fread("../out/DRC_Infection_Dump.tsv", sep = "\t")
DR = fread("../out/DR_predicted_Dump.tsv")
DR %<>% dplyr::select(1:10)
DRC_Cell$tx = DRC_Cell$min_value/DRC_Cell$max_value
DRC_Cell$Cyto = ifelse((p.adjust(DRC_Cell$noEffect) < 0.01 & (
DRC_Cell$hill < 0 | DRC_Cell$tx < 0.7)), "Cyto", "no")
DRC_Cell$Cyto = ifelse((DRC_Cell$tx > 0.7 &
p.adjust(DRC_Cell$noEffect) < 0.01), "no", DRC_Cell$Cyto)
Predict_Cell = DR %>% dplyr::select(drug,
predict_nuclei,
mmoles_per_liter_normalized) %>%
unique() %>%
filter(!is.na(mmoles_per_liter_normalized)) %>%
arrange(mmoles_per_liter_normalized)%>%
pivot_wider(., names_from = mmoles_per_liter_normalized,
names_prefix = "Dose_",
values_from = predict_nuclei,
values_fn = list(predict_nuclei = mean))
Predict_Cell2 = reduction(Predict_Cell, 0.9)
Predict_Cell2 = reduction(Predict_Cell2, 0.5)
Predict_Cell2 = reduction(Predict_Cell2, 0.2)
Start_dead = Predict_Cell2$drug[Predict_Cell2$Dose_0.008_0.6==1] %>%
unique
Tox_end = Predict_Cell2$drug[Predict_Cell2$Dose_8_0.9>=1& Predict_Cell2$TOT_0.9 == 1] %>%
unique
Tox_half = Predict_Cell2$drug[Predict_Cell2$Dose_8_0.2==0& Predict_Cell2$TOT_0.2 == 0] %>%
unique
DRC_Cell$Cyto = ifelse((DRC_Cell$drug %in% Tox_end), "Cyto - End", DRC_Cell$Cyto)
Toxics = DRC_Cell$drug[DRC_Cell$Cyto == "Cyto"]
DRC_Cell$Cyto = ifelse((DRC_Cell$drug %in% Toxics & DRC_Cell$drug %in% Tox_half), "Cyto - Half Alive", DRC_Cell$Cyto)
Type_Cyto = DRC_Cell$Cyto %>% unique()
DRC_Cell_Cyto = DRC_Cell %>% dplyr::select(drug, Cyto) %>% unique()
DR = dplyr::full_join(DR, DRC_Cell_Cyto)
## Get the non-toxics and classify according to strength of response
nonToxic = DRC_Cell$drug[DRC_Cell$Cyto %ni% "Cyto"]
DRC_Infected$tx = DRC_Infected$min_value/DRC_Infected$max_value
DRC_Infected$Resp = ifelse((p.adjust(DRC_Infected$noEffect) < 0.01), "Effect", "no-Effect")
Predict_Infected = DR %>%
filter(drug %in% nonToxic) %>%
dplyr::select(drug,
predict_infected,
# predict_nuclei,
mmoles_per_liter_normalized) %>%
unique() %>%
filter(!is.na(mmoles_per_liter_normalized)) %>%
arrange(mmoles_per_liter_normalized)%>%
pivot_wider(., names_from = mmoles_per_liter_normalized,
names_prefix = "Dose_",
values_from = predict_infected,
values_fn = list(predict_infected = mean))
Predict_infected2  = reduction(Predict_Infected, 0.9)
Predict_infected2 = reduction(Predict_infected2, 0.8)
Predict_infected2 = reduction(Predict_infected2, 0.4)
Predict_infected2 = reduction(Predict_infected2, 0.5)
Predict_infected2 = reduction(Predict_infected2, 0.6)
Predict_infected2 = reduction(Predict_infected2, 0.2)
Predict_infected2 = reduction(Predict_infected2, 0.3)
Predict_infected2 = reduction(Predict_infected2, 0.35)
Predict_infected2 = reduction(Predict_infected2, 0.65)
Predict_infected2 = reduction(Predict_infected2, 0.75)
DRC_Infected$strength = NA #DRC_Infected$Cyto
DRC_Infected$strength = ifelse((DRC_Infected$drug %in%
Predict_infected2$drug[Predict_infected2$TOT_0.75 >= 1]), "Low", DRC_Infected$Resp)
DRC_Infected$strength = ifelse((DRC_Infected$drug %in%
Predict_infected2$drug[Predict_infected2$TOT_0.65 >= 1]), "Very Weak", DRC_Infected$strength)
DRC_Infected$strength = ifelse((DRC_Infected$drug %in%
Predict_infected2$drug[Predict_infected2$TOT_0.5 >= 1]), "Weak", DRC_Infected$strength)
DRC_Infected$strength = ifelse((DRC_Infected$drug %in%
Predict_infected2$drug[Predict_infected2$TOT_0.2 >= 1]), "Strong", DRC_Infected$strength)
DRC_Infected$strength = ifelse(DRC_Infected$strength == "Effect", "no-Effect", DRC_Infected$strength)
DRC_Infected_str = DRC_Infected %>% dplyr::select(drug, strength) %>% unique()
DR = dplyr::full_join(DR, DRC_Infected_str)
DR$Outcome = ifelse(DR$Cyto != "no" & DR$strength != "no-Effect", "Effect & tracing Cytotoxicity", ifelse(DR$Cyto == "no" & DR$strength != "no-Effect", DR$strength, DR$Cyto))
DR$Outcome2 = DR$Outcome
DR$Outcome =  ifelse(DR$Outcome %in% c("Cyto - Half Alive" , "Cyto - End"), "no", DR$Outcome)
DR$Outcome =  ifelse(is.na(DR$Outcome), "Manual Inspection", DR$Outcome)
DR$Outcome =  ifelse(DR$Outcome == "no", "No-Effect", DR$Outcome)
DR %>%
dplyr::select(Outcome, drug) %>%
unique() %>%
group_by(Outcome) %>%
summarise(., n= n())
Type_Cyto = DR$Outcome %>%
unique() %>%
na.exclude()
DR$drug[DR$Outcome == "Strong"] %>%
unique()
DR$drug[DR$Outcome == "Weak"] %>%
unique()
DR$drug[DR$Outcome == "Low"] %>%
unique()
DR$drug[DR$Outcome == "Very Weak"] %>%
unique()
#################
#### Check if Strong & Cyto
test2 = ifelse(DR$strength == "Strong" & DR$Cyto != "no", "Test 2", NA)
ambiguous = DR$drug[!is.na(test2)] %>% unique()
X = Predict_Cell %>% filter(drug %in% ambiguous)
Y = Predict_Infected %>% filter(drug %in% ambiguous)
# Strong_Ones = Y$drug[rowSums(X[,-1]>(Y[,-1])*1.5) > ((ncol(X)-1)*.2)]
Strong_Ones = Y$drug[rowSums(X[,-1]>((Y[,-1]))*0.5) > 0]
Cyto_Strong = ambiguous[ambiguous %ni% Strong_Ones]
## Same for Weak
test2 = ifelse(DR$strength == "Weak" & DR$Cyto != "no", "Test 2", NA)
ambiguous = DR$drug[!is.na(test2)] %>% unique()
X = Predict_Cell %>% filter(drug %in% ambiguous)
Y = Predict_Infected %>% filter(drug %in% ambiguous)
# Weak_Ones = Y$drug[rowSums(X[, -c(1, ncol(X))] > Y[, -c(1, ncol(Y))]) > 0]
Weak_Ones = Y$drug[rowSums(X[,-1]>(Y[,-1])*0.5) > 0]
Cyto_Weak = ambiguous[ambiguous %ni% Weak_Ones]
## Same for Very Weak
test2 = ifelse(DR$strength == "Very Weak" & DR$Cyto != "no", "Test 2", NA)
ambiguous = DR$drug[!is.na(test2)] %>% unique()
X = Predict_Cell %>% filter(drug %in% ambiguous)
Y = Predict_Infected %>% filter(drug %in% ambiguous)
# Weak_Ones = Y$drug[rowSums(X[, -c(1, ncol(X))] > Y[, -c(1, ncol(Y))]) > 0]
VeryWeak_Ones = Y$drug[rowSums(X[,-1]>(Y[,-1])*0.5) > 0]
Cyto_VeryWeak = ambiguous[ambiguous %ni% VeryWeak_Ones]
## Same for Low
test2 = ifelse(DR$strength == "Low" & DR$Cyto != "no", "Test 2", NA)
ambiguous = DR$drug[!is.na(test2)] %>% unique()
X = Predict_Cell %>% filter(drug %in% ambiguous)
Y = Predict_Infected %>% filter(drug %in% ambiguous)
Low_Ones = Y$drug[rowSums(X[,-1]>(Y[,-1])*0.5) > 0]
Cyto_Low = ambiguous[ambiguous %ni% VeryWeak_Ones]
DR$Outcome = ifelse(DR$drug %in% Strong_Ones, "Strong (80%)", DR$Outcome)
DR$Outcome = ifelse(DR$drug %in% Weak_Ones, "Weak (50%)", DR$Outcome)
DR$Outcome = ifelse(DR$drug %in% VeryWeak_Ones, "Very Weak (35%)", DR$Outcome)
DR$Outcome = ifelse(DR$drug %in% Low_Ones, "Low (25%)", DR$Outcome)
DR$Outcome = ifelse(DR$drug %in% Cyto_Weak, "Cyto", DR$Outcome)
DR$Outcome = ifelse(DR$drug %in% Cyto_Strong, "Cyto", DR$Outcome)
DR$Outcome = ifelse(DR$drug %in% Cyto_Low, "Cyto", DR$Outcome)
DR$Outcome = ifelse(DR$drug %in% Cyto_VeryWeak, "Cyto", DR$Outcome)
DR$Outcome = ifelse(DR$drug %in% Start_dead, "Cyto", DR$Outcome)
DR$Outcome = ifelse(DR$Outcome %in% "Low", "Low (25%)", DR$Outcome )
DR$Outcome = ifelse(DR$Outcome %in% "Strong", "Strong (80%)", DR$Outcome )
DR$Outcome = ifelse(DR$Outcome %in% "Very Weak", "Very Weak (35%)", DR$Outcome )
DR$Outcome = ifelse(DR$Outcome %in% "Weak", "Weak (50%)", DR$Outcome )
DR$Outcome = factor(DR$Outcome, levels = c(
"Strong (80%)"  ,
"Weak (50%)"    ,
"Very Weak (35%)",
"Low (25%)"     ,
"Cyto"  ,
"No-Effect",
"Manual Inspection"
))
DR %>% dplyr::select(Outcome, drug) %>%
unique() %>%
group_by(Outcome) %>%
summarise(., n= n()) %>%
mutate( `%` = round(n/sum(n)*100,2))
outcomes = DR %>%
dplyr::select(Outcome, drug) %>%
unique()
outcomes$Outcome = ifelse(outcomes$Outcome == "", "Remove", as.character(outcomes$Outcome))
manual = outcomes %>%
filter(Outcome == "Manual Inspection") %>%
dplyr::select(drug)
exp_drugs_strong = c("IPAG",
"obatoclax")
exp_drugs_weak = c("Ganetespib",
"Progesterone",
"Regadenoson",
"Phthalylsulfathiazole",
"Astemizole",
"Levetiracetam",
"Nitazoxanide") %>% tolower()
outcomes$Outcome2 = ifelse(outcomes$drug %in% exp_drugs_strong, "Strong (80%)", as.character(outcomes$Outcome))
outcomes$Outcome2 = ifelse(outcomes$drug %in% exp_drugs_weak, "Weak (50%)", as.character(outcomes$Outcome2))
outcomes$Outcome2 = ifelse(outcomes$Outcome2 %in% "Manual Inspection", "No-Effect", as.character(outcomes$Outcome2))
###
### Manual Check on the outcomes
Manual_Inspection = readxl::read_excel('../data/Broad Drugs Reclassification.xlsx')
Manual_Inspection %<>% filter(Category != "NA")
outcomes$Outcome2[tolower(outcomes$drug) %in% tolower(Manual_Inspection$Drug)]<- "No-Effect"
outcomes %>%
group_by(Outcome2) %>%
summarise(n = n())
outcomes %>%
group_by(Outcome, Outcome2) %>%
summarise(n = n())
fwrite(outcomes, "../out/Broad_Outcome.tsv", sep = "\t")
O2 = outcomes %>%
filter(Outcome != "Remove") %>%
mutate(Cyto_Model = ifelse(Outcome == "Cyto", 1, 0)) %>%
mutate(Cyto_GT = ifelse(Outcome2 == "Cyto", 1, 0)) %>%
mutate(Low_Model = ifelse(Outcome == "Low (25%)", 1, 0)) %>%
mutate(Low_GT = ifelse(Outcome2 == "Low (25%)", 1, 0)) %>%
mutate(nE_Model = ifelse(Outcome %in% c("No-Effect" ,"Manual Inspection"), 1, 0)) %>%
mutate(nE_GT = ifelse(Outcome2 == "No-Effect", 1, 0)) %>%
mutate(Strong_Model = ifelse(Outcome == "Strong (80%)", 1, 0)) %>%
mutate(Strong_GT = ifelse(Outcome2 == "Strong (80%)", 1, 0)) %>%
mutate(vWeak_Model = ifelse(Outcome == "Very Weak (35%)", 1, 0)) %>%
mutate(vWeak_GT = ifelse(Outcome2 == "Very Weak (35%)", 1, 0)) %>%
mutate(Weak_Model = ifelse(Outcome == "Weak (50%)", 1, 0)) %>%
mutate(Weak_GT = ifelse(Outcome2 == "Weak (50%)", 1, 0))
require(pROC)
all_calc = function(predicted, ground_truth){
AUC = auc(predicted ~ ground_truth)
XX = table(predicted, ground_truth)
tn = XX[1,1]
tp = XX[2,2]
fp = XX[2,1]
fn = XX[1,2]
TPR = tp/(tn + tp)
TNR = tn/(tn + tp)
PPV = tp/(tp + fp)
NPV = tn /(tn+fn)
FNR = fn/(fn+tp)
FPR = fp/(fp + tn)
FDR = fp/(fp + tp)
ACC = (tp + tn)/(fp + tp + tn + fn)
F1 = (tp*2)/(2*tp + fp +fn)
O = data.frame(AUC = AUC,
TN = tn,
TP = tp,
FP = fp,
FN = fn,
TPR = TPR,
TNR = TNR,
PPV = PPV,
NPV = NPV,
FNR = FNR,
FPR = FPR,
FDR = FDR,
ACC = ACC,
F1 = F1
)
return(O)
}
Low = all_calc(O2$Low_Model , O2$Low_GT)
Cyto = all_calc(O2$Cyto_Model,O2$Cyto_GT)
nE = all_calc(O2$nE_Model,O2$nE_GT)
S = all_calc(O2$Strong_Model,O2$Strong_GT)
W = all_calc(O2$Weak_Model,O2$Weak_Model)
vW = all_calc(O2$vWeak_Model,O2$vWeak_Model)
ACC = cbind(ID = c('Low (25%)', 'Cytotoxic', 'No-Effect', 'Strong (80%)',
'Weak (50%)', 'Very Weak (35%)'),
rbind(Low, Cyto, nE, S, W, vW))
ACC %>%
fwrite(., "../out/Accuracy.csv")
ACC
Targets = fread("../data/BroadLibrary_DrugTargets.csv")
names(Targets)[2] = "Broad_Sample"
Outcomes = fread('../out/Broad_Outcome.tsv') %>%
select(-Outcome) %>%
rename(pert_iname = drug) %>%
rename(Outcome = Outcome2)
Targets = fread("../data/BroadLibrary_DrugTargets.csv")
names(Targets)[2] = "Broad_Sample"
Outcomes = fread('../out/Broad_Outcome.tsv') %>%
select(-Outcome) %>%
rename(pert_iname = drug) %>%
rename(Outcome = Outcome2)
Outcomes = fread('../out/Broad_Outcome.tsv') %>%
# select(-Outcome) %>%
rename(pert_iname = drug) %>%
rename(Outcome = Outcome2)
Outcomes = fread('../out/Broad_Outcome.tsv')
View(Outcomes)
View(Outcomes)
Outcomes = fread('../out/Broad_Outcome.tsv') %>%
dplyr::select(-Outcome) %>%
rename(pert_iname = drug) %>%
rename(Outcome = Outcome2)
Outcomes
Outcomes = fread('../out/Broad_Outcome.tsv') %>%
dplyr::select(-Outcome) %>%
rename(pert_iname = drug) %>%
rename(Outcome = Outcome2)
Combined = dplyr::right_join(Targets, ID_MAP) %>%
right_join(., Outcomes) %>%
fwrite("../out/Outcome_ID_SMILES_TARGET.csv")
Dose_Response = fread("../data/Complete_Mapped_All_csvs.tsv")
ID_MAP = Dose_Response %>%
filter(pert_iname != "") %>%
select(pert_iname, Broad_Sample) %>%
unique()
Dose_Response = fread("../data/Complete_Mapped_All_csvs.tsv")
ID_MAP = Dose_Response %>%
filter(pert_iname != "") %>%
dplyr::select(pert_iname, Broad_Sample) %>%
unique()
tmp = ID_MAP$Broad_Sample %>%
stringr::str_split("-", simplify = TRUE)
ID_MAP$Broad_Sample = paste(tmp[,1], tmp[,2], sep = "-")
ID_MAP %<>% unique()
Targets = fread("../data/BroadLibrary_DrugTargets.csv")
names(Targets)[2] = "Broad_Sample"
Outcomes = fread('../out/Broad_Outcome.tsv') %>%
dplyr::select(-Outcome) %>%
rename(pert_iname = drug) %>%
rename(Outcome = Outcome2)
Combined = dplyr::right_join(Targets, ID_MAP) %>%
right_join(., Outcomes) %>%
fwrite("../out/Outcome_ID_SMILES_TARGET.csv")
Combined = dplyr::right_join(Targets, ID_MAP) %>%
right_join(., Outcomes)
View(Combined)
Combined %>%
fwrite("../out/Outcome_ID_SMILES_TARGET.csv")
Dose_Response = fread("../data/Complete_Mapped_All_csvs.tsv")
ID_MAP = Dose_Response %>%
filter(pert_iname != "") %>%
dplyr::select(pert_iname, Broad_Sample) %>%
unique()
tmp = ID_MAP$Broad_Sample %>%
stringr::str_split("-", simplify = TRUE)
ID_MAP$Broad_Sample = paste(tmp[,1], tmp[,2], sep = "-")
ID_MAP %<>% unique()
Targets = fread("../data/BroadLibrary_DrugTargets.csv")
names(Targets)[2] = "Broad_Sample"
Outcomes = fread('../out/Broad_Outcome.tsv') %>%
dplyr::select(-Outcome) %>%
rename(pert_iname = drug) %>%
rename(Outcome = Outcome2)
Combined = dplyr::right_join(Targets, ID_MAP) %>%
right_join(., Outcomes)
Combined %>%
fwrite("../out/Outcome_ID_SMILES_TARGET.csv")
